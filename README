obfuscate shell scripts README                          D. Nygren 15 May 2020
--------------------------------------------------------------------------------

1)  Problem: Engineering needs to release programming scripts to the field that
contain information it does not want disclosed. These scripts are written in an
interpreted language that is human readable which complicates keeping the
contents of the script hidden. Password protection is not a viable option
because of the large distribution, and feedback from Service that passwords are
cumbersome, and actually make people more curious about the internal workings of
the script than they would be otherwise.

2)  Solution: The obfuscate Makefile solves the problem by taking a script (the
example is for a BASH shell script) stripping blank lines, lines that consist
entirely of comments, and leading whitespace from the script to make the script
both more compact and to obscure its function. Then it is compressed, encrypted
using the name of the file as the key, and then a wrapper script is placed
around it. 

    To inhibit the script's operation, the name of the script is changed. To
allow execution, restore the original name of the script.

    When executed, the wrapper decrypts the file using the name of the script
(obtained in a non-obvious way) and executes the script as if it was entered in
one long line on the input device. No temporary files exist to be intercepted.
All decryption is done on the command line.

    The stripping, compression, and encryption is all automatically accomplished
by the Makefile, enabling the programmer to do all prototype work with the
unobfuscated source code. Accommodations are made for debugging the fielded
obfuscated script via the ability in the Makefile to create an stripped source
file that can be used to diagnose errors in the obfuscated code because the line
numbers reported by the shell will be the same in this file as the obfuscated
one.

    Attempts to discover the operation of the script through the ps(1) command
fail because all that will be seen is the first few lines of the script as if
they were typed in on the command line. If this is unacceptable, a dummy line
should be used as the first line of the script:

DUMMY=0 # A dummy Shell constant is used as the first line of the script.
# The above prevents any of the script's contents from being viewed from ps(1).

3) Example:

$ make
sed -e '/^$/d' \
-e 's/^[ \t]*//' \
-e 's/[ \t]*$//' \
-e '/^\s*#\([^!]\|$\)/d' demo.sh | \
sed -e "1i\\" -e 'set +x' | \
/bin/gzip -c  | \
/usr/bin/openssl enc -aes256 -a -k obfuscated | \
sed -e "1i\\" -e "#! /bin/bash" \
-e "1i\\" -e '# Copyright (c) 2020, by Daniel C. Nygren.' \
-e "1i\\" -e 'export script_name=\$(/usr/bin/basename \$0)' \
-e "1i\\" -e '/bin/bash -c "\$(/bin/cat <<"END_OF_FILE" | /usr/bin/openssl enc -aes256 -a -d -k \${0##*/} | /bin/zcat' -e "\$a\\" -e 'END_OF_FILE' -e "\$a\\" -e ')" -- "\$@"' >| obfuscated
/bin/chmod a+x obfuscated
*** Rename obfuscated to encrypt the script. ***
*** Change the name back to obfuscated to allow execution. ***
$ ./obfuscated
Hello World!
$ mv obfuscated encrypted
$ ./encrypted
bad decrypt
140277545001024:error:06065064:digital envelope routines:EVP_DecryptFinal_ex:bad decrypt:../crypto/evp/evp_enc.c:536:

gzip: stdin: not in gzip format
$ mv encrypted obfuscated
$ ./obfuscated
Hello World!
